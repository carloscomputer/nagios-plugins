#!/usr/bin/python3

import lxc
import sys
import argparse

parser = argparse.ArgumentParser()
parser.add_argument("filter", nargs="?", help="filter the checked containers with a comma seperated list (check_lxc c1,c2,c3)")
parser.add_argument("-m", action="store_true", help="Show average memory usage of all containers or filtered containers")
parser.add_argument("-M", action="store_true", help="Show total memory usage of all containers or filtered containers")
parser.add_argument("-r", action="store_true", help="Show number of running containers")
parser.add_argument("-a", action="store_true", help="Show number of active containers")
parser.add_argument("-s", action="store_true", help="Show number of stopped containers")
parser.add_argument("-f", action="store_true", help="Show number of frozen containers")
args = parser.parse_args()

# msg_prefix + msg_plain + '|' + msg_data (nagios output format)
msg_plain = []
msg_data = []

exit_level = 0

hosts = []
active_hosts = []
stopped_hosts = []
frozen_hosts = []
memory = []

def get_hosts():
	for container in lxc.list_containers(as_object=True):
		if container.running:
			if not args.filter or (container.name in args.filter): 
				hosts.append(container)
		if container.state in ["RUNNING", "FROZEN", "UNKNOWN"]:
			if not args.filter or (container.name in args.filter):
				active_hosts.append(container)
		if container.state == "STOPPED":
			if not args.filter or (container.name in args.filter):
				stopped_hosts.append(container)
		if container.state == "FROZEN":
			if not args.filter or (container.name in args.filter):
				frozen_hosts.append(container) 

def get_memory():
	for host in hosts:
		try:
			memory_ram = int(host.get_cgroup_item("memory.usage_in_bytes"))
		except:
			memory_ram = 0

		try:
			memory_swap = int(host.get_cgroup_item("memory.memsw.usage_in_bytes"))-memory_ram
		except:
			memory_swap = 0

		memory.append(memory_ram+memory_swap)

def mean(stuff):
	return sum(stuff)/len(stuff)

def byte_to_mb(bytes):
	return int(bytes/1048576)

def byte_to_gb(bytes):
	return format(float(bytes/1073741824), '.2f')

def readable_bytes(input_bytes):
	if input_bytes >= 1073741824:
		return str(byte_to_gb(input_bytes))+"GB"
	else:
		return str(byte_to_mb(input_bytes))+"MB"

def print_running():
	if len(hosts) > 0:
		msg_plain.append("Containers running: "+str(len(hosts)))
		msg_data.append("running="+str(len(hosts)))

def print_stopped():
	if len(stopped_hosts) > 0:
	        msg_plain.append("Containers stopped: "+str(len(stopped_hosts)))
        	msg_data.append("stopped="+str(len(stopped_hosts)))

def print_active():
	if len(active_hosts) > 0:
	        msg_plain.append("Containers active: "+str(len(active_hosts)))
        	msg_data.append("active="+str(len(active_hosts)))

def print_frozen():
	if len(frozen_hosts) > 0:
	        msg_plain.append("Containers frozen: "+str(len(frozen_hosts)))
        	msg_data.append("frozen="+str(len(frozen_hosts)))

def print_total_memory():
	if len(memory) > 0:
		msg_plain.append("Total Memory usage: "+readable_bytes(sum(memory)))
		msg_data.append("totalmem="+str(byte_to_mb(sum(memory)))+"MB")

def print_average_memory():
	if len(memory) >= 2:
		msg_plain.append("Average Memory usage: "+readable_bytes(mean(memory)))
		msg_data.append("averagemem="+str(byte_to_mb(mean(memory)))+"MB")

# CHECK OPTIONS HERE
# default (no args except filter which is handled in get_hosts() anyway)
if not args.M and not args.m and not args.r and not args.a and not args.s and not args.f:
	get_hosts()
	get_memory()
	print_running()
	print_stopped()
	print_total_memory()
	print_average_memory()

# any options (except filter!)
if args.M or args.m or args.r or args.a or args.s or args.f:
	get_hosts()

	if args.M or args.m:
		get_memory()
		if args.M:
			print_total_memory()
		if args.m:
			print_average_memory()
	if args.r:
		print_running()
	if args.s:
		print_stopped()
	if args.a:
		print_active()
	if args.f:
		print_frozen()

# Print the nagios output style
# msg_prefix + msg_plain + '|' + msg_data (nagios output format) (calculate msg_prefix based on exit_level)
# exit(0): OK, exit(1): WARNING, exit(2): CRITICAL
if exit_level in [0,1,2] and len(msg_plain) > 0 and len(msg_data) > 0:
	if exit_level is 0:
		print("LXC OK - "+", ".join(msg_plain)+"|"+"; ".join(msg_data)+";")
	elif exit_level is 1:
		print("LXC WARNING - "+", ".join(msg_plain)+"|"+"; ".join(msg_data)+";")
	elif exit_level is 2:
		print("LXC CRITICAL - "+", ".join(msg_plain)+"|"+"; ".join(msg_data)+";")

	exit(exit_level)
else:
	if exit_level not in [0,1,2]:
		print("Invalid exit level")
	if not len(msg_plain) > 0 and not len(msg_data) > 0:
		print("No matching hosts found")
